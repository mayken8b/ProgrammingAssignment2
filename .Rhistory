source("http://bioconductor.org/bioclite.R")
find.package(devtools)
find.package('devtools')
install.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
install.packages("swirl")
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
mySqrt <- sqrt(z - 1)
mySqrt
myDiv <- z/mySqrt
myDiv
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by = 0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0, 1, 2), times=10)
rep(c(0, 1, 2), each=10)
numvect <- c(0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Michael")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
myData <- sample(c(y, z), 100)
myNA <- is.na(myData)
myNA
myData == NA
sum(myNA)
myData
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(1, 5, 7)]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4, 5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matric
?matrix
myMatrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(myMatrix, myMatrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(vector, myMatrix)
cbind(patients, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames, myData)
colnames(myData, cnames)
colnames(myData) <- cnames
myData
bye()
quit()
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
complete <- function(directory, id = 1:332){
files <- vector()
for(i in id){
if(i < 10){
files <- c(files, read.csv(paste(directory, "/", "00", i, ".csv", sep="")))
} else if(i > 9 && i < 100){
files <- c(files, read.csv(paste(directory, "/", "0", i, ".csv", sep="")))
} else {
files <- c(files, read.csv(paste(directory,"/", i, ".csv", sep="")))
}
}
cases <- data.frame()
for(x in 1:length(files)){
cases <- c(cases, id[x] = complete.cases(files[2*x], files[3*x]))
}
print(cases)
}
?complete.cases
complete <- function(directory, id = 1:332){
files <- vector()
for(i in id){
if(i < 10){
files <- c(files, read.csv(paste(directory, "/", "00", i, ".csv", sep="")))
} else if(i > 9 && i < 100){
files <- c(files, read.csv(paste(directory, "/", "0", i, ".csv", sep="")))
} else {
files <- c(files, read.csv(paste(directory,"/", i, ".csv", sep="")))
}
}
cases <- vector()
for(x in 1:length(files)){
cases <- c(cases, sum(complete.cases(files[2*x], files[3*x]))
}
print(cases)
}
complete <- function(directory, id = 1:332){
files <- list()
for(i in id){
if(i < 10){
files <- c(files, read.csv(paste(directory, "/", "00", i, ".csv", sep="")))
} else if(i > 9 && i < 100){
files <- c(files, read.csv(paste(directory, "/", "0", i, ".csv", sep="")))
} else {
files <- c(files, read.csv(paste(directory,"/", i, ".csv", sep="")))
}
}
cases <- vector()
for(x in 1:length(files)){
cases <- c(cases, sum(complete.cases(files[2*x], files[3*x]))
}
print(files)
}
complete <- function(directory, id = 1:332){
files <- list()
for(i in id){
if(i < 10){
files <- c(files, read.csv(paste(directory, "/", "00", i, ".csv", sep="")))
} else if(i > 9 && i < 100){
files <- c(files, read.csv(paste(directory, "/", "0", i, ".csv", sep="")))
} else {
files <- c(files, read.csv(paste(directory,"/", i, ".csv", sep="")))
}
}
cases <- vector()
for(x in 1:length(files)){
cases <- c(cases, sum(complete.cases(files[2*x], files[3*x]))
print(files)
}
complete <- function(directory, id = 1:332){
files <- list()
for(i in id){
if(i < 10){
files <- c(files, read.csv(paste(directory, "/", "00", i, ".csv", sep="")))
} else if(i > 9 && i < 100){
files <- c(files, read.csv(paste(directory, "/", "0", i, ".csv", sep="")))
} else {
files <- c(files, read.csv(paste(directory,"/", i, ".csv", sep="")))
}
}
cases <- vector()
for(x in 1:length(files)){
cases <- c(cases, sum(complete.cases(files[2*x], files[3*x]))
print(files)
complete <- function(directory, id = 1:332){
files <- list()
for(i in id){
if(i < 10){
files <- c(files, read.csv(paste(directory, "/", "00", i, ".csv", sep="")))
} else if(i > 9 && i < 100){
files <- c(files, read.csv(paste(directory, "/", "0", i, ".csv", sep="")))
} else {
files <- c(files, read.csv(paste(directory,"/", i, ".csv", sep="")))
}
}
cases <- vector()
for(x in 1:length(files)){
cases <- c(cases, sum(complete.cases(files[2*x], files[3*x]))
}
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
x$getinverse
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
setwd("~/GitHub/ProgrammingAssignment2")
amatrix$getinverse()
cacheSolve(amatrix)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(amatrix)
cacheSolve(amatrix)
solve(amatrix$get())
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(amatrix)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
amatrix$getinverse
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachevector.R')
avector <- makeVector(c(1, 2, 3, 4, 5))
cachemean(avector)
cachemean(avector)
cacheSolve(amatrix)
amatrix$getinverse
amatrix$get
amatrix
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(amatrix)
amatrix
amatrix$set
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(amatrix)
cacheSolve(amatrix)
cacheSolve(amatrix)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(amatrix)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(amatrix)
cacheSolve(amatrix)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
